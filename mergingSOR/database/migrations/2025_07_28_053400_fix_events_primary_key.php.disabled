<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;
use Illuminate\Support\Facades\DB;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        
        // Wyłącz foreign key constraints
        DB::statement('PRAGMA foreign_keys = OFF');
        
        try {
            // Pobierz aktualną strukturę tabeli
            $tableInfo = DB::select("PRAGMA table_info(events)");
            $createTableSql = DB::select("SELECT sql FROM sqlite_master WHERE type='table' AND name='events'")[0]->sql;
            
            // Utwórz tabelę tymczasową z poprawną strukturą PRIMARY KEY AUTOINCREMENT
            // Usuń istniejące PRIMARY KEY AUTOINCREMENT, jeśli występuje
            $tempTableSql = preg_replace('/"id" INTEGER PRIMARY KEY AUTOINCREMENT,?/', '"id" INTEGER PRIMARY KEY AUTOINCREMENT,', $createTableSql);
            // Usuń wszelkie dodatkowe PRIMARY KEY AUTOINCREMENT
            $tempTableSql = preg_replace('/,?\s*PRIMARY KEY AUTOINCREMENT,?/', '', $tempTableSql);
            $tempTableSql = str_replace('CREATE TABLE "events"', 'CREATE TABLE "events_temp"', $tempTableSql);

            DB::statement($tempTableSql);
            
            // Skopiuj dane do tymczasowej tabeli
            DB::statement("INSERT INTO events_temp SELECT * FROM events");
            
            // Usuń starą tabelę
            DB::statement("DROP TABLE events");
            
            // Zmień nazwę tymczasowej tabeli
            DB::statement("ALTER TABLE events_temp RENAME TO events");
            
            // Odtwórz indeksy jeśli istnieją
            $indexes = DB::select("SELECT sql FROM sqlite_master WHERE type='index' AND tbl_name='events' AND sql IS NOT NULL");
            foreach ($indexes as $index) {
                try {
                    DB::statement($index->sql);
                } catch (Exception $e) {
                    // Ignoruj błędy przy odtwarzaniu indeksów
                }
            }
            
        } finally {
            // Ponownie włącz foreign key constraints
            DB::statement('PRAGMA foreign_keys = ON');
        }
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        // Nie implementujemy rollback dla bezpieczeństwa danych
        // W razie potrzeby można przywrócić z kopii zapasowej
        throw new Exception('Cannot rollback this migration for data safety');
    }
};
